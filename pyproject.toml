[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "conv2d-fsq-hsmm"
version = "0.2.0"
description = "Conv2d-FSQ-HSMM: Behavioral synchrony analysis with vector quantization and temporal modeling"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Conv2d Team", email = "flower.mobile@gmail.com"},
]
keywords = ["behavioral-analysis", "synchrony", "vector-quantization", "fsq", "hsmm", "edge-ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

dependencies = [
    "torch>=2.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "tensorboard>=2.13.0",
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "hydra-core>=1.3.0",
    "hydra-colorlog>=1.2.0",
    "omegaconf>=2.3.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "deepdiff>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.4.0",
    "types-PyYAML>=6.0.0",
    "types-tqdm>=4.66.0",
    "torch-stub",  # Type stubs for torch
]
hailo = [
    "hailo-model-zoo>=2.11.0",
    "hailo-sdk-client>=4.17.0",
]
coreml = [
    "coremltools>=7.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

[project.scripts]
conv2d = "conv2d.cli.main:main"
conv2d-train = "conv2d.cli.train:main"
conv2d-eval = "conv2d.cli.evaluate:main"
conv2d-export = "conv2d.cli.export:main"

[project.urls]
Homepage = "https://github.com/yourusername/conv2d-fsq-hsmm"
Documentation = "https://conv2d-fsq-hsmm.readthedocs.io"
Repository = "https://github.com/yourusername/conv2d-fsq-hsmm"
Issues = "https://github.com/yourusername/conv2d-fsq-hsmm/issues"

[tool.setuptools]
packages = ["conv2d", "conv2d.*"]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
conv2d = ["py.typed", "**/*.yaml", "**/*.yml"]

# Ruff configuration (fast Python linter)
[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "RUF",  # Ruff-specific rules
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__
"tests/*" = ["ARG", "S101"]  # Allow unused arguments and asserts in tests

[tool.ruff.isort]
known-first-party = ["conv2d"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"  # Ban relative imports beyond parent

# Black configuration
[tool.black]
target-version = ["py310", "py311", "py312"]
line-length = 100
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["conv2d"]
add_imports = ["from __future__ import annotations"]
skip_gitignore = true
force_single_line = false
use_parentheses = true
ensure_newline_before_comments = true
multi_line_output = 3
include_trailing_comma = true

# mypy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Per-module overrides
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "scipy.*",
    "sklearn.*",
    "pandas.*",
    "matplotlib.*",
    "seaborn.*",
    "tqdm.*",
    "tensorboard.*",
    "onnx.*",
    "onnxruntime.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_any_unimported = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=conv2d",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--timeout=300",
    "-n=auto",  # Run tests in parallel
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/conv2d"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"